"""expand_database_schema_phase1_nullable

Revision ID: 5c8fc6049d5b
Revises: c3537f541a66
Create Date: 2025-08-26 00:09:23.883465

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5c8fc6049d5b'
down_revision: Union[str, Sequence[str], None] = 'c3537f541a66'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clients',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('contact_numbers', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('docx_template_blob', sa.Text(), nullable=True),
    sa.Column('fields_map', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('certificates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('report_id')
    )
    op.create_table('disclaimers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('report_id')
    )
    op.create_table('properties',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('property_index', sa.Integer(), nullable=True),
    sa.Column('property_type', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('revisions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('diff', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('author_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('valuation_summary',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('market_value', sa.Float(), nullable=False),
    sa.Column('market_value_words', sa.String(), nullable=False),
    sa.Column('forced_sale_value', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('report_id')
    )
    op.create_table('access',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('landmark', sa.String(), nullable=True),
    sa.Column('directions_text', sa.Text(), nullable=True),
    sa.Column('road_names', sa.String(), nullable=True),
    sa.Column('road_width', sa.String(), nullable=True),
    sa.Column('road_surface', sa.String(), nullable=True),
    sa.Column('maintainer', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('property_id')
    )
    op.create_table('ai_suggestions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=True),
    sa.Column('section', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('accepted_by', sa.UUID(), nullable=True),
    sa.Column('accepted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['accepted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('appendices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('caption', sa.String(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('buildings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('building_index', sa.Integer(), nullable=True),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('storeys', sa.Integer(), nullable=True),
    sa.Column('structure', sa.String(), nullable=True),
    sa.Column('roof_type', sa.String(), nullable=True),
    sa.Column('roof_structure', sa.String(), nullable=True),
    sa.Column('walls', sa.String(), nullable=True),
    sa.Column('floors', sa.String(), nullable=True),
    sa.Column('doors', sa.String(), nullable=True),
    sa.Column('windows', sa.String(), nullable=True),
    sa.Column('layout_text', sa.Text(), nullable=True),
    sa.Column('area_sqft', sa.Float(), nullable=False),
    sa.Column('area_sqm', sa.Float(), nullable=False),
    sa.Column('age_years', sa.Integer(), nullable=True),
    sa.Column('condition', sa.String(), nullable=True),
    sa.Column('occupancy', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('identification',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('lot_number', sa.String(), nullable=False),
    sa.Column('plan_number', sa.String(), nullable=False),
    sa.Column('plan_date', sa.DateTime(), nullable=False),
    sa.Column('surveyor_name', sa.String(), nullable=False),
    sa.Column('land_name', sa.String(), nullable=True),
    sa.Column('extent_perches', sa.Float(), nullable=False),
    sa.Column('extent_sqm', sa.Float(), nullable=False),
    sa.Column('extent_local', sa.String(), nullable=True),
    sa.Column('boundaries', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('title_owner', sa.String(), nullable=True),
    sa.Column('deed_no', sa.String(), nullable=True),
    sa.Column('deed_date', sa.DateTime(), nullable=True),
    sa.Column('notary', sa.String(), nullable=True),
    sa.Column('interest', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('property_id')
    )
    op.create_table('locality',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('narrative', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('property_id')
    )
    op.create_table('location',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('address_full', sa.Text(), nullable=True),
    sa.Column('village', sa.String(), nullable=True),
    sa.Column('gn_division', sa.String(), nullable=True),
    sa.Column('ds_division', sa.String(), nullable=True),
    sa.Column('district', sa.String(), nullable=False),
    sa.Column('province', sa.String(), nullable=False),
    sa.Column('lat', sa.Float(), nullable=True),
    sa.Column('lng', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('property_id')
    )
    op.create_table('planning',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('zoning', sa.String(), nullable=True),
    sa.Column('street_line', sa.String(), nullable=True),
    sa.Column('easements', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('property_id')
    )
    op.create_table('site',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('shape', sa.String(), nullable=True),
    sa.Column('topography', sa.String(), nullable=True),
    sa.Column('level_vs_road', sa.String(), nullable=True),
    sa.Column('soil', sa.String(), nullable=True),
    sa.Column('water_table_depth_ft', sa.Float(), nullable=True),
    sa.Column('frontage_ft', sa.Float(), nullable=True),
    sa.Column('features', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('flood_risk', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('property_id')
    )
    op.create_table('utilities',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('electricity', sa.Boolean(), nullable=True),
    sa.Column('water', sa.Boolean(), nullable=True),
    sa.Column('telecom', sa.Boolean(), nullable=True),
    sa.Column('sewerage', sa.String(), nullable=True),
    sa.Column('drainage', sa.String(), nullable=True),
    sa.Column('other', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('property_id')
    )
    op.create_table('valuation_lines',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('line_type', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('rate', sa.Float(), nullable=False),
    sa.Column('depreciation_pct', sa.Float(), nullable=True),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('valuer_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('titles', sa.String(), nullable=True),
    sa.Column('qualifications', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('panels', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('registration_no', sa.String(), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('phones', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('signature_file_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['signature_file_id'], ['files.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.add_column('files', sa.Column('checksum', sa.String(), nullable=True))
    op.add_column('files', sa.Column('kind', sa.String(), nullable=True))
    op.add_column('ocr_results', sa.Column('language', sa.String(), nullable=True))
    op.add_column('ocr_results', sa.Column('raw_text', sa.Text(), nullable=True))
    op.add_column('ocr_results', sa.Column('blocks_json', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.drop_column('ocr_results', 'full_text')
    op.drop_column('ocr_results', 'language_detected')
    op.drop_column('ocr_results', 'pages_data')
    op.add_column('reports', sa.Column('ref', sa.String(), nullable=True))
    op.add_column('reports', sa.Column('purpose', sa.String(), nullable=True))
    op.add_column('reports', sa.Column('basis_of_value', sa.String(), nullable=True))
    op.add_column('reports', sa.Column('report_type', sa.String(), nullable=True))
    op.add_column('reports', sa.Column('report_date', sa.DateTime(), nullable=True))
    op.add_column('reports', sa.Column('inspection_date', sa.DateTime(), nullable=True))
    op.add_column('reports', sa.Column('finalized_at', sa.DateTime(), nullable=True))
    op.add_column('reports', sa.Column('currency', sa.String(), nullable=True))
    op.add_column('reports', sa.Column('fsv_percentage', sa.Float(), nullable=True))
    op.add_column('reports', sa.Column('client_id', sa.UUID(), nullable=True))
    op.drop_index(op.f('ix_reports_reference_number'), table_name='reports')
    op.create_index(op.f('ix_reports_ref'), 'reports', ['ref'], unique=True)
    op.create_foreign_key(None, 'reports', 'clients', ['client_id'], ['id'])
    op.drop_column('reports', 'reference_number')
    op.drop_column('reports', 'data')
    op.drop_column('reports', 'property_address')
    op.drop_column('reports', 'title')
    op.add_column('users', sa.Column('role', sa.String(), nullable=True))
    op.drop_column('users', 'panel_memberships')
    op.drop_column('users', 'title')
    op.drop_column('users', 'qualifications')
    op.drop_column('users', 'contact_numbers')
    op.drop_column('users', 'business_address')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('business_address', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('contact_numbers', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('qualifications', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('panel_memberships', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('users', 'role')
    op.add_column('reports', sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('reports', sa.Column('property_address', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('reports', sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('reports', sa.Column('reference_number', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'reports', type_='foreignkey')
    op.drop_index(op.f('ix_reports_ref'), table_name='reports')
    op.create_index(op.f('ix_reports_reference_number'), 'reports', ['reference_number'], unique=True)
    op.drop_column('reports', 'client_id')
    op.drop_column('reports', 'fsv_percentage')
    op.drop_column('reports', 'currency')
    op.drop_column('reports', 'finalized_at')
    op.drop_column('reports', 'inspection_date')
    op.drop_column('reports', 'report_date')
    op.drop_column('reports', 'report_type')
    op.drop_column('reports', 'basis_of_value')
    op.drop_column('reports', 'purpose')
    op.drop_column('reports', 'ref')
    op.add_column('ocr_results', sa.Column('pages_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('ocr_results', sa.Column('language_detected', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('ocr_results', sa.Column('full_text', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_column('ocr_results', 'blocks_json')
    op.drop_column('ocr_results', 'raw_text')
    op.drop_column('ocr_results', 'language')
    op.drop_column('files', 'kind')
    op.drop_column('files', 'checksum')
    op.drop_table('valuer_profiles')
    op.drop_table('valuation_lines')
    op.drop_table('utilities')
    op.drop_table('site')
    op.drop_table('planning')
    op.drop_table('location')
    op.drop_table('locality')
    op.drop_table('identification')
    op.drop_table('buildings')
    op.drop_table('appendices')
    op.drop_table('ai_suggestions')
    op.drop_table('access')
    op.drop_table('valuation_summary')
    op.drop_table('revisions')
    op.drop_table('properties')
    op.drop_table('disclaimers')
    op.drop_table('certificates')
    op.drop_table('templates')
    op.drop_table('clients')
    # ### end Alembic commands ###
