"""enhance_valuer_profile_with_common_fields

Revision ID: 7374d4f374e0
Revises: 5c8fc6049d5b
Create Date: 2025-08-30 14:12:19.270575

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7374d4f374e0'
down_revision: Union[str, Sequence[str], None] = '5c8fc6049d5b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('compliance_checklist_templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('category', sa.Enum('UDA', 'MUNICIPAL', 'URBAN_COUNCIL', 'PRADESHIYA_SABHA', 'CEA', 'NBRO', 'RDA', 'OTHER', name='regulationcategory'), nullable=False),
    sa.Column('property_types', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('mandatory_documents', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('recommended_documents', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('conditional_documents', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('approval_stages', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('estimated_timeline_weeks', sa.Integer(), nullable=True),
    sa.Column('estimated_cost_range', sa.String(), nullable=True),
    sa.Column('complexity_level', sa.String(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('compliance_assessments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('property_type', sa.String(), nullable=False),
    sa.Column('applicable_regulations', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('compliance_requirements', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('regulation_summary', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('complexity_level', sa.String(), nullable=True),
    sa.Column('applicable_documents', postgresql.ARRAY(sa.UUID()), nullable=True),
    sa.Column('assessed_by', sa.UUID(), nullable=False),
    sa.Column('assessment_version', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['assessed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('regulation_documents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('authority', sa.String(), nullable=False),
    sa.Column('category', sa.Enum('UDA', 'MUNICIPAL', 'URBAN_COUNCIL', 'PRADESHIYA_SABHA', 'CEA', 'NBRO', 'RDA', 'OTHER', name='regulationcategory'), nullable=False),
    sa.Column('document_type', sa.String(), nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('mime_type', sa.String(), nullable=True),
    sa.Column('applicable_areas', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('province', sa.String(), nullable=True),
    sa.Column('district', sa.String(), nullable=True),
    sa.Column('north_bound', sa.Float(), nullable=True),
    sa.Column('south_bound', sa.Float(), nullable=True),
    sa.Column('east_bound', sa.Float(), nullable=True),
    sa.Column('west_bound', sa.Float(), nullable=True),
    sa.Column('effective_date', sa.DateTime(), nullable=True),
    sa.Column('expiry_date', sa.DateTime(), nullable=True),
    sa.Column('superseded_by_id', sa.UUID(), nullable=True),
    sa.Column('version', sa.String(), nullable=True),
    sa.Column('gazette_number', sa.String(), nullable=True),
    sa.Column('uploaded_by', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('download_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ),
    sa.ForeignKeyConstraint(['superseded_by_id'], ['regulation_documents.id'], ),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('regulation_location_associations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('location_identifier', sa.String(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('radius_km', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['regulation_documents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
# op.alter_column('clients', 'author_id',
    #            existing_type=sa.UUID(),
    #            nullable=False)  # Comment out - column doesn't exist
# op.create_index(op.f('ix_reports_ref'), 'reports', ['ref'], unique=False)  # Index might already exist
    op.add_column('valuer_profiles', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('valuer_profiles', sa.Column('designation', sa.String(), nullable=True))
    op.add_column('valuer_profiles', sa.Column('membership_status', sa.String(), nullable=True))
    op.add_column('valuer_profiles', sa.Column('company_name', sa.String(), nullable=True))
    op.add_column('valuer_profiles', sa.Column('firm_address', sa.Text(), nullable=True))
    op.add_column('valuer_profiles', sa.Column('contact_phones', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('valuer_profiles', sa.Column('contact_email', sa.String(), nullable=True))
    op.add_column('valuer_profiles', sa.Column('default_standards', sa.String(), nullable=True))
    op.add_column('valuer_profiles', sa.Column('indemnity_status', sa.String(), nullable=True))
    op.add_column('valuer_profiles', sa.Column('default_disclaimers', sa.Text(), nullable=True))
    op.add_column('valuer_profiles', sa.Column('default_certificate', sa.Text(), nullable=True))
    op.drop_constraint(op.f('valuer_profiles_signature_file_id_fkey'), 'valuer_profiles', type_='foreignkey')
    op.drop_column('valuer_profiles', 'signature_file_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('valuer_profiles', sa.Column('signature_file_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('valuer_profiles_signature_file_id_fkey'), 'valuer_profiles', 'files', ['signature_file_id'], ['id'])
    op.drop_column('valuer_profiles', 'default_certificate')
    op.drop_column('valuer_profiles', 'default_disclaimers')
    op.drop_column('valuer_profiles', 'indemnity_status')
    op.drop_column('valuer_profiles', 'default_standards')
    op.drop_column('valuer_profiles', 'contact_email')
    op.drop_column('valuer_profiles', 'contact_phones')
    op.drop_column('valuer_profiles', 'firm_address')
    op.drop_column('valuer_profiles', 'company_name')
    op.drop_column('valuer_profiles', 'membership_status')
    op.drop_column('valuer_profiles', 'designation')
    op.drop_column('valuer_profiles', 'full_name')
# op.drop_index(op.f('ix_reports_ref'), table_name='reports')  # Index might not exist
# op.alter_column('clients', 'author_id',
    #            existing_type=sa.UUID(),
    #            nullable=True)  # Comment out - column doesn't exist
    op.drop_table('regulation_location_associations')
    op.drop_table('regulation_documents')
    op.drop_table('compliance_assessments')
    op.drop_table('compliance_checklist_templates')
    # ### end Alembic commands ###
