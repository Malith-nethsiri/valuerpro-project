name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: valuerpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run environment validation
      run: |
        cd backend
        python -m app.core.env_validator
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/valuerpro_test
        SECRET_KEY: test-secret-key-for-ci-pipeline-very-long-and-secure
        ENVIRONMENT: test

    - name: Run linting and formatting checks
      run: |
        cd backend
        black --check .
        isort --check-only .
        flake8 .

    - name: Run type checking
      run: |
        cd backend
        mypy app/

    - name: Run security checks
      run: |
        cd backend
        bandit -r app/
        safety check

    - name: Run database migrations
      run: |
        cd backend
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/valuerpro_test
        SECRET_KEY: test-secret-key-for-ci-pipeline-very-long-and-secure

    - name: Run tests with coverage
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80 tests/
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/valuerpro_test
        SECRET_KEY: test-secret-key-for-ci-pipeline-very-long-and-secure
        ENVIRONMENT: test
        RATE_LIMIT_ENABLED: false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps

    - name: Run linting
      run: |
        cd frontend
        npm run lint

    - name: Run type checking
      run: |
        cd frontend
        npm run type-check

    - name: Run unit tests
      run: |
        cd frontend
        npm run test:ci
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000

    - name: Build application
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python, javascript

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: valuerpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps

    - name: Set up database
      run: |
        cd backend
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/valuerpro_test
        SECRET_KEY: test-secret-key-for-ci-pipeline-very-long-and-secure

    - name: Start backend server
      run: |
        cd backend
        python -m app.main &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/valuerpro_test
        SECRET_KEY: test-secret-key-for-ci-pipeline-very-long-and-secure
        ENVIRONMENT: test

    - name: Run API integration tests
      run: |
        cd backend
        pytest tests/integration/ -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/valuerpro_test
        SECRET_KEY: test-secret-key-for-ci-pipeline-very-long-and-secure
        ENVIRONMENT: test

    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install

    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000

  # Deploy to staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # Example: docker build, push to ECR, update ECS service, etc.

  # Deploy to production (only on main branch with manual approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        # Example: docker build, push to ECR, update ECS service, etc.

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release created from commit ${{ github.sha }}
        draft: false
        prerelease: false